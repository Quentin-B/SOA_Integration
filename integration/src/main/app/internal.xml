<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <data-mapper:config name="CatalogueRegs_To_Orders" transformationGraphPath="catalogueregs_to_orders.grf" doc:name="CatalogueRegs_To_Orders"/>
    <flow name="MisterDiscount-catalogue_registry" doc:name="MisterDiscount-catalogue_registry">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="internal" doc:name="HTTP"/>
        <cxf:jaxws-service serviceClass="fr.unice.polytech.groupe.integration.services.InternalService" doc:name="CXF"/>
        <set-variable variableName="operation" value="#[flowVars.cxf_operation.localPart]" doc:name="operation"/>
        <choice doc:name="Choice">
            <when expression="#[operation == &quot;registerForCatalogue&quot;]">
                <logger message="OP : REGISTER_FOR_CATALOGUE" level="INFO" doc:name="register"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/admin/save/catalogue" doc:name="register for catalogue"/>
            </when>
            <when expression="#[operation == &quot;orderCatalogues&quot;]">
                <logger message="OP : ORDER CATALOGUES" level="INFO" doc:name="order catalogues"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/getCatalogue" doc:name="request catalogue"/>
                <logger message="ASK PDF CREATION" level="INFO" doc:name="ask PDF creation"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/admin/order/catalogue" doc:name="read db"/>
                <logger message="ORDER #[payload] catalogues from printer" level="INFO" doc:name="order catalogues printer"/>
            </when>
            <when expression="#[operation == &quot;sendCatalogues&quot;]">
                <logger message="OP : SEND CATALOGUES" level="INFO" doc:name="send"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/admin/read/catalogue" doc:name="read db"/>
                <choice doc:name="Choice">
                    <when expression="#[payload.size()&gt;0]">
                        <logger message="send #[payload.size()] catalogues" level="INFO" doc:name="send"/>
                        <flow-ref name="send_catalogues" doc:name="send catalogues"/>
                    </when>
                    <otherwise>
                        <logger message="No catalogue to send" level="INFO" doc:name="nothing to send"/>
                        <set-payload value="#[(int)0]" doc:name="Set Payload"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <logger message="WRONG OPERATION : #[flowVars.operation]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="send_catalogues" doc:name="send_catalogues">
        <data-mapper:transform config-ref="CatalogueRegs_To_Orders" doc:name="CatalogueRegs To Orders"/>
        <scripting:component doc:name="set pickup date">
            <scripting:script engine="Groovy"><![CDATA[import java.util.Date;

def orders = message.payload;

for(order in orders){
	def now = new Date();
	def then = new Date();
	then.setTime(now.getTime()+15*24*60*1000);

	def info = order.deliveryInfo;
	info.setPickupDate(then);
	order.setDeliveryInfo(info);
}
return orders;
]]></scripting:script>
        </scripting:component>
        <set-variable variableName="orders" value="#[payload]" doc:name="set orders"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderFedPS" doc:name="call fedps"/>
        <scripting:component doc:name="update orders">
            <scripting:script engine="Groovy"><![CDATA[def orders = message.getInvocationProperty('orders');
def results = payload;

for(int i=0;i<orders.size();i++){
	def order = orders.get(i);
	def result = results.get(i);
	order.setFedPsId(result.orderId);
	order.deliveryInfo.setTrackingNumber(result.trackingNumber);
	order.deliveryInfo.setEta(result.eta);
	order.deliveryInfo.setDeliveryPrice(result.deliveryPrice);
}

return orders;
]]></scripting:script>
        </scripting:component>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="/vm/admin/save/catorder" doc:name="save db"/>
        <logger message="Send mail w/ ETA and trackingNumber #[payload.trackingNumber], etc" level="INFO" doc:name="SEND MAIL"/>
        <data-mapper:transform config-ref="create_receipt" doc:name="order to receipt"/>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <logger message="#[payload.size()] catalogues sent" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload.size()]" doc:name="Set Payload"/>
    </sub-flow>
    <flow name="get_catalogue" doc:name="get_catalogue">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/getCatalogue" doc:name="VM"/>
        <logger message="GET CATALOGUE FROM TEAMFORCE :  #[payload]" level="INFO" doc:name="GET CATALOGUE"/>
        <set-payload value="1" doc:name="Set Payload"/>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8080" path="rest/manager/catalogue/#[payload]" method="GET" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="Object to String"/>
    </flow>
</mule>
