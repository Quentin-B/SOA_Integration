<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd">
    <http:body-to-parameter-map-transformer name="Body_to_Parameter_Map" doc:name="Body to Parameter Map"/>
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="http://localhost:8080/webservices/CustomersPrivate?wsdl" service="CustomerPrivateService" port="CustomerPrivatePort" serviceAddress="http://localhost:8080/webservices/CustomersPrivate" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Pojo_To_Xml_process_" transformationGraphPath="pojo_to_xml_process_.grf" doc:name="Pojo_To_Xml_process_"/>
    <data-mapper:config name="Xml_processResponse__To_Pojo" transformationGraphPath="xml_processresponse__to_pojo.grf" doc:name="Xml_processResponse__To_Pojo"/>
    <ws:consumer-config name="WS_payment" wsdlLocation="http://localhost:8080/webservices/Payment-Public-DOC?wsdl" service="PaymentDOCPublicService" port="PaymentDOCPublicPort" serviceAddress="http://localhost:8080/webservices/Payment-Public-DOC" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Order_To_JSON" transformationGraphPath="order_to_json.grf" doc:name="Order_To_JSON"/>
    <data-mapper:config name="CSV_To_Pojo" transformationGraphPath="csv_to_pojo.grf" doc:name="CSV_To_Pojo"/>
    <data-mapper:config name="JSON_To_Pojo" transformationGraphPath="json_to_pojo.grf" doc:name="JSON_To_Pojo"/>
    <data-mapper:config name="JSON_To_Pojo_1" transformationGraphPath="json_to_pojo_1.grf" doc:name="JSON_To_Pojo_1"/>
    <data-mapper:config name="create_receipt" transformationGraphPath="order_to_receipt.grf" doc:name="create_receipt"/>
    <data-mapper:config name="XML_To_Pojo_1" transformationGraphPath="xml_to_pojo_1.grf" doc:name="XML_To_Pojo_1"/>
    <data-mapper:config name="Pojo_To_Xml_process__1" transformationGraphPath="pojo_to_xml_process__1.grf" doc:name="Pojo_To_Xml_process__1"/>
    <data-mapper:config name="Xml_processResponse__To_Pojo_1" transformationGraphPath="xml_processresponse__to_pojo_1.grf" doc:name="Xml_processResponse__To_Pojo_1"/>

    <flow name="MisterDiscount" doc:name="MisterDiscount">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP"/>
        <cxf:jaxws-service serviceClass="fr.unice.polytech.groupe.integration.services.MisterDiscountService" doc:name="CXF"/>
        <set-variable variableName="operation" value="#[flowVars.cxf_operation.localPart]" doc:name="operation"/>
        <choice doc:name="Choice">
            <when expression="#[operation == &quot;createOrder&quot;]">
                <logger message="CREATE_ORDER" level="INFO" doc:name="create_order"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrder" doc:name="create_order"/>
            </when>
            <when expression="#[operation == &quot;getOrderInfo&quot;]">
                <logger level="INFO" doc:name="get order info" message="GET ORDER #[payload]"/>
                <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/getOrderInfo" doc:name="get_order_info"/>
            </when>
            <otherwise>
                <logger message="WRONG OPERATION : #[flowVars.operation]" level="INFO" doc:name="Logger"/>

            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="BEUBEUH #[message.exception]" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <flow name="create_orders_from_file" doc:name="create_orders_from_file">
        <file:inbound-endpoint path="./_inputs" moveToDirectory="./_data" responseTimeout="10000" doc:name="inputs/*.xml">
            <file:filename-regex-filter pattern=".*\.xml$" caseSensitive="true"/>
        </file:inbound-endpoint>
        <data-mapper:transform config-ref="XML_To_Pojo_1" doc:name="XML To OrderInput"/>
        <logger message="PROCESSING ORDERS + #[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="cpt" value="0" doc:name="cpt"/>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrder" doc:name="create_order"/>
        <set-variable variableName="cpt" value="#[(int)flowVars.cpt +1]" doc:name="cpt++"/>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <logger message="#[flowVars.cpt] orders processed" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="create_order" doc:name="create_order">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrder" doc:name="VM create_order"/>
        <logger message="ENTREE" level="INFO" doc:name="Logger"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[def order = new fr.unice.polytech.groupe.integration.business.Order();

order.setProducts(message.payload.products);
order.setInvoiceAddress(message.payload.invoiceAddress);
order.setShippingAddress(message.payload.shippingAddress);
order.setCardNumber(message.payload.cardNumber);
order.setName(message.payload.name);

return order;]]></scripting:script>
        </scripting:component>

        <set-variable variableName="order" value="#[message.payload]" doc:name="Variable"/>
        <flow-ref name="sf_order_teamforce" doc:name="order_teamforce"/>
        <flow-ref name="sf_order_redwarehouse" doc:name="order_redwarehouse"/>
        <flow-ref name="sf_order_fedps" doc:name="order_fedps"/>

        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/postProcessing" doc:name="post"/>


    </flow>
    <sub-flow name="sf_order_teamforce" doc:name="sf_order_teamforce">
        <logger message="COMMANDE TF - DEBUT #[flowVars.order]" level="INFO" doc:name="Logger"/>
        <data-mapper:transform config-ref="Order_To_JSON" returnClass="java.lang.String" doc:name="Order To JSON"/>
        <set-payload value="addresses=#[payload]" doc:name="Set Payload"/>
        <message-properties-transformer mimeType="application/x-www-form-urlencoded" doc:name="Message Properties"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderTF" doc:name="/vm/MD/createOrderTF"/>
        <logger message="COMMANDE TF - FIN #[payload]" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="create_order_TF" doc:name="create_order_TF">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderTF" doc:name="/vm/MD/createOrderTF"/>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8080" path="rest/user/1/order" method="POST" contentType="application/x-www-form-urlencoded" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <data-mapper:transform config-ref="JSON_To_Pojo" doc:name="JSON To Pojo"/>
        <logger message="ONYCROIT #[payload.price]" level="INFO" doc:name="Logger"/>
    </flow>
    <sub-flow name="sf_order_redwarehouse" doc:name="sf_order_redwarehouse">
        <logger message="COMMANDE RWH - DEBUT" level="INFO" doc:name="Logger"/>
        <scripting:component doc:name="TMP - MOCKUP">
            <scripting:script engine="Groovy"><![CDATA[def json = "{";
json = json + "'typeEvent':'pickup',"
json = json + "'dateEvent':'24022014',"
json = json + "'command':["

def isFirst = true;
def order = message.getInvocationProperty('order');
order.getProducts().each { key, value -> 
	if (!isFirst) {
		json = json + ","
	} else {
		isFirst = false;
	}
	json = json + "{"
	json = json + "'ref_product':'${key}',";
	json = json + "'quantity':'${value}'"
	json = json + "}"
};

json = json + "]}"
return json;]]></scripting:script>
        </scripting:component>
        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderRWH" doc:name="/vm/MD/createOrderRWH"/>
        <scripting:component doc:name="Update Order">
            <scripting:script engine="Groovy"><![CDATA[def order = message.getInvocationProperty('order');

def result = payload;

order.setWareHouseId(result.getPlanningID());

def deliveryInfo = order.getDeliveryInfo();
if (deliveryInfo == null) {
	deliveryInfo = new fr.unice.polytech.groupe.integration.business.DeliveryInfo();
	order.setDeliveryInfo(deliveryInfo);
}
deliveryInfo.setWidth(result.getWidth());
deliveryInfo.setHeight(result.getHeight());
deliveryInfo.setDepth(result.getDepth());
deliveryInfo.setWeight(result.getWeight());

deliveryInfo.setWarehouseAddress(result.getWarehouseAddress());

deliveryInfo.setPickupDate(result.getPickupdate());

return order;
]]></scripting:script>
        </scripting:component>
        <logger message="COMMANDE RWH - FIN" level="INFO" doc:name="Logger"/>
    </sub-flow>
    <flow name="create_order_RWH" doc:name="create_order_RWH">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderRWH" doc:name="VM"/>
        <set-payload value="planning=#[payload]" doc:name="Set Payload"/>
        <message-properties-transformer mimeType="application/x-www-form-urlencoded" doc:name="Message Properties"/>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="8080" path="rest/redwarehouse/public/plannings" method="POST" contentType="application/x-www-form-urlencoded" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <data-mapper:transform config-ref="JSON_To_Pojo_1" doc:name="JSON To Pojo"/>

    </flow>
    <sub-flow name="sf_order_fedps" doc:name="sf_order_fedps">
        <logger message="COMMANDE FedPS - DEBUT #[flowVars.order] #[payload]" level="INFO" doc:name="Logger"/>
        <scripting:component doc:name="put order in list">
            <scripting:script engine="Groovy"><![CDATA[def order = message.payload;

def list = new java.util.ArrayList<fr.unice.polytech.groupe.integration.business.Order>();
list.add(order);

return list;]]></scripting:script>
        </scripting:component>

        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderFedPS" doc:name="/vm/MD/createOrderFedPS"/>
        <scripting:component doc:name="update order">
            <scripting:script engine="Groovy"><![CDATA[def order = message.getInvocationProperty('order');

def result = payload.get(0);

order.setFedPsId(result.orderId);
order.deliveryInfo.setTrackingNumber(result.trackingNumber);
order.deliveryInfo.setEta(result.eta);
order.deliveryInfo.setDeliveryPrice(result.deliveryPrice);
order.setParcelStatus(result.status);

return order;
]]></scripting:script>
        </scripting:component>

        <logger message="COMMANDE FedPS - FIN" level="INFO" doc:name="Logger"/>
    </sub-flow>

    <flow name="create_order_FedPS" doc:name="create_order_FedPS">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/createOrderFedPS" doc:name="VM"/>
        <data-mapper:transform config-ref="Pojo_To_Xml_process_" doc:name="Pojo To Xml&lt;process&gt;"/>

        <ws:consumer config-ref="Web_Service_Consumer" operation="process" doc:name="Web Service Consumer"/>
        <data-mapper:transform config-ref="Xml_processResponse__To_Pojo" doc:name="Xml&lt;processResponse&gt; To Pojo">
            <data-mapper:input-arguments>

            </data-mapper:input-arguments>
        </data-mapper:transform>
    </flow>
    <flow name="order_post_processing" doc:name="order_post_processing">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/postProcessing" doc:name="VM"/>
        <logger message="CALL PAYMENT #[payload]" level="INFO" doc:name="CALL PAYMENT"/>
        <logger level="INFO" doc:name="send mail w/ payment info"/>
        <logger level="INFO" doc:name="send mail w/ tracking number"/>
        <logger message="SAVE ORDER DB" level="INFO" doc:name="SAVE ORDER DB"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="/vm/admin/save/order" doc:name="save_db"/>
        <data-mapper:transform config-ref="create_receipt" doc:name="create receipt"/>
    </flow>
    <flow name="get_catalogue" doc:name="get_catalogue">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/getCatalogue" doc:name="VM"/>
        <logger message="GET CATALOGUE FROM TEAMFORCE" level="INFO" doc:name="GET CATALOGUE FROM TEAMFORCE"/>
    </flow>
    <flow name="get_order_info" doc:name="get_order_info">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/MD/getOrderInfo" doc:name="VM"/>
        <set-variable variableName="orderId" value="#[payload]" doc:name="save id"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="/vm/admin/read/order" doc:name="VM"/>
        <choice doc:name="Check if order exists">
            <when expression="#[payload is NullPayload]">
                <scripting:component doc:name="throw exception">
                    <scripting:script engine="Groovy"><![CDATA[throw new fr.unice.polytech.groupe.integration.exceptions.UnknownOrderException(message.getInvocationProperty('orderId'));
]]></scripting:script>
                </scripting:component>
            </when>
            <otherwise>
                <logger message="GOT ORDER #[payload] FROM DB" level="INFO" doc:name="continue"/>
            </otherwise>
        </choice>
        <logger message="APPEL TEAMFORCE POUR INFOS COMMANDE" level="INFO" doc:name="APPEL TEAMFORCE POUR INFOS COMMANDE"/>
        <logger message="APPEL REDWAREHOUSE POUR INFOS COMMANDE" level="INFO" doc:name="APPEL REDWAREHOUSE POUR INFOS COMMANDE"/>

        <data-mapper:transform config-ref="Pojo_To_Xml_process__1" doc:name="Pojo To Xml&lt;process&gt;"/>
        <ws:consumer config-ref="Web_Service_Consumer" operation="process" doc:name="Web Service Consumer"/>
        <data-mapper:transform config-ref="Xml_processResponse__To_Pojo_1" doc:name="Xml&lt;processResponse&gt; To Pojo"/>
        <scripting:component doc:name="update order">
            <scripting:script engine="Groovy"><![CDATA[def order = message.getInvocationProperty('order');

def result = payload;

order.setFedPsId(result.orderId);
order.deliveryInfo.setTrackingNumber(result.trackingNumber);
order.deliveryInfo.setEta(result.eta);
order.deliveryInfo.setDeliveryPrice(result.deliveryPrice);
order.setParcelStatus(result.status);

return order;
]]></scripting:script>
        </scripting:component>
        <data-mapper:transform config-ref="create_receipt" doc:name="create receipt"/>

    </flow>
</mule>
