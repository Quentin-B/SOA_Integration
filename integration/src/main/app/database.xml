<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
    <flow name="init_database" doc:name="init_database">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" path="admin/init" doc:name="HTTP"/>
        <scripting:component doc:name="INIT DB">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*

def sql = Sql.newInstance("jdbc:derby:memory:glue;create=true", new Properties());
sql.execute("CREATE TABLE orders (tf_order_id varchar(50),rwh_order_id varchar(50),fedps_order_id varchar(50),fedps_follow_id varchar(50),status varchar(15))")
sql.execute("CREATE TABLE catalogueOrders (fedps_order_id varchar(50),fedps_follow_id varchar(50))")
sql.execute("CREATE TABLE catalogue (name varchar(30), address varchar(30), city varchar(20), zip varchar(10), country varchar(20), toSend int)")

return "Database initialized";]]></scripting:script>
        </scripting:component>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-payload value="Database already initialized" doc:name="Set Payload"/>
        </catch-exception-strategy>
    </flow>
    <flow name="save_order" doc:name="save_order">
        <vm:inbound-endpoint exchange-pattern="one-way" path="/vm/admin/save/order" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
sql.execute("insert into orders (tf_order_id, rwh_order_id, fedps_order_id, fedps_follow_id,status) values ('"+ payload.teamForceId+"', '"+payload.wareHouseId+"', '"+payload.fedPsId+"', '"+payload.deliveryInfo.trackingNumber+"', '"+payload.paymentStatus+"')");

System.out.println("Info stored for order " + payload.teamForceId);]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="read_order" doc:name="read_order">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/admin/read/order" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
def query = "select * from orders where tf_order_id = '"+ message.payload+"'";
def data = sql.rows(query);
if(data[0]==null){
	return null;
}
def order = new fr.unice.polytech.groupe.integration.business.Order();
order.setTeamForceId(data[0]['tf_order_id']);
order.setWareHouseId(data[0]['rwh_order_id']);
order.setFedPsId(data[0]['fedps_order_id']);
def info = new fr.unice.polytech.groupe.integration.business.DeliveryInfo();
info.setTrackingNumber(data[0]['fedps_follow_id']);
order.setDeliveryInfo(info);
String st = data[0]['status'];
if(st=="PROCESSING")
	order.setStatus(fr.unice.polytech.groupe.integration.business.Status.PROCESSING);
else if(st==APPROVED)
	order.setStatus(fr.unice.polytech.groupe.integration.business.Status.APPROVED);
else
	order.setStatus(fr.unice.polytech.groupe.integration.business.Status.DECLINED);

return order;]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="save_catalogue_order" doc:name="save_catalogue_order">
        <vm:inbound-endpoint exchange-pattern="one-way" path="/vm/admin/save/catorder" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
sql.execute("insert into catalogueOrders (fedps_order_id, fedps_follow_id) values ('"+payload.fedPsId+"', '"+payload.deliveryInfo.trackingNumber+"')");

System.out.println("Info stored for catalogue order " + payload.fedPsId);]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="register_for_catalogue" doc:name="register_for_catalogue">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/admin/save/catalogue" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
sql.execute("insert into catalogue (name,address,city,zip,country,toSend) values ('"+ payload.name+"', '"+payload.deliveryAddress.addressLine1+payload.deliveryAddress.addressLine2+"', '"+payload.deliveryAddress.cityName+"', '"+payload.deliveryAddress.zipCode+"', '"+payload.deliveryAddress.country+"',0)");

System.out.println("Info stored for order " + payload.name);
return true;]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="get_nb_catalogues_for_printer" doc:name="get_nb_catalogues_for_printer">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/admin/order/catalogue" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.ArrayList

def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
// we have to send a catalogue to all currently registered users
sql.executeUpdate("UPDATE catalogue SET toSend=1");
def query = "SELECT COUNT(*) FROM catalogue WHERE toSend=1";
def data = sql.rows(query);

return data[0][0];]]></scripting:script>
        </scripting:component>
    </flow>
    <flow name="read_catalogue_for_send" doc:name="read_catalogue_for_send">
        <vm:inbound-endpoint exchange-pattern="request-response" path="/vm/admin/read/catalogue" doc:name="VM"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import groovy.sql.*
import java.sql.*
import java.util.ArrayList
//get users we have to send the catalogue to
def sql = Sql.newInstance("jdbc:derby:memory:glue", new Properties());
def query = "SELECT * FROM catalogue WHERE toSend=1";
def data = sql.rows(query);
//create results list
def results = new ArrayList<fr.unice.polytech.groupe.integration.business.catalogue.CatalogueRegistry>();
for(int i=0;i<data.size();i++){
	def cat = new fr.unice.polytech.groupe.integration.business.catalogue.CatalogueRegistry();
	def address = new fr.unice.polytech.groupe.integration.business.Address();
	cat.setName(data[i]['NAME']);
	results.add(cat);
}
//change back toSend to 0
sql.executeUpdate("UPDATE catalogue SET toSend=0");

return results;]]></scripting:script>
        </scripting:component>

    </flow>
</mule>
